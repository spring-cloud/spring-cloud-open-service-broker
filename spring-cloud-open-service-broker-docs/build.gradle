/*
 * Copyright 2002-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id 'org.asciidoctor.jvm.pdf'
	id 'org.asciidoctor.jvm.convert'
}

description = "Spring Cloud Open Service Broker Documentation"

configurations {
	asciidoctorExtensions
}

dependencies {
	// BOM imports - The versions used in these files will override any other versions found in the graph
	implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

	implementation project(':spring-cloud-open-service-broker-core')
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'io.projectreactor:reactor-core'
	asciidoctorExtensions 'io.spring.asciidoctor.backends:spring-asciidoctor-backends:0.0.5'
}

javadoc {
	enabled = false
}

task prepareAsciidocBuild(type: Sync) {
	// Copy doc sources
	from "src/docs/asciidoc"
	// to a temporary build directory
	into "$buildDir/asciidoc"
}

asciidoctorPdf {
	dependsOn prepareAsciidocBuild
	baseDirFollowsSourceFile()

	asciidoctorj {
		sourceDir "$buildDir/asciidoc"
		inputs.dir(sourceDir)
		sources {
			include 'index.adoc'
		}
		options doctype: 'book'
		attributes 'icons': 'font',
				'sectanchors': '',
				'sectnums': '',
				'toc': '',
				'source-highlighter' : 'coderay',
				revnumber: project.version,
				'project-version': project.version
	}
}

asciidoctor {
	dependsOn asciidoctorPdf
	configurations "asciidoctorExtensions"
	outputOptions {
		backends "spring-html"
	}
	baseDirFollowsSourceFile()
	sourceDir = file("$buildDir/asciidoc")
	sources {
		include '*.adoc'
	}
	resources {
		from(sourceDir) {
			include 'images/*', 'css/**', 'js/**'
		}
	}
	logDocuments = true
	options doctype: 'book', eruby: 'erubis'
	attributes 'revnumber': project.version,
			'spring-version': project.version,
			'branch-or-tag': project.version.endsWith('SNAPSHOT') ? 'main' : "v${project.version}",
			'icons': 'font',
			'idprefix': '',
			'idseparator': '-',
			docinfo: 'shared',
			sectanchors: '',
			sectnums: '',
			stylesdir: "css/",
			stylesheet: 'spring.css',
			'linkcss': true,
			'nofooter': true,
			'allow-uri-read': '',
			'source-highlighter': 'highlight.js',
			'highlightjsdir': 'js/highlight',
			'highlightjs-theme': 'github',
			'project-version': project.version
}
