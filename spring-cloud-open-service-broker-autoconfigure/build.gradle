/*
 * Copyright 2002-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = "Spring Cloud Open Service Broker Auto-Configuration"

dependencies {
	// BOM imports - The versions used in these files will override any other versions found in the graph
	implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
	annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

	api project(':spring-cloud-open-service-broker-core')
	optionalApi 'org.springframework.boot:spring-boot-starter-web'
	optionalApi 'org.springframework.boot:spring-boot-starter-webflux'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
	testImplementation project(path: ':spring-cloud-open-service-broker-core', configuration: 'testOutput')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "io.projectreactor.tools:blockhound-junit-platform:${blockHoundVersion}"
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'jakarta.servlet:jakarta.servlet-api'
	testImplementation 'org.mockito:mockito-core'
	testImplementation "org.hamcrest:java-hamcrest:${javaHamcrestVersion}"
	testImplementation 'org.assertj:assertj-core'
	testImplementation 'org.apache.commons:commons-lang3'
}

configurations {
	testOutput
}

artifacts {
	testOutput testsJar
}

compileJava.dependsOn(processResources)
